"use server"

import { supabase } from "@/lib/supabase"
import { getIgnoreInvoiceIds } from "./utils"

/**
 * Fetches vendor analysis data
 */
export async function fetchVendorAnalysis() {
  try {
    // First, get all invoices
    const { data: invoices, error: invoicesError } = await supabase.from("invoices").select("id, source")

    if (invoicesError) {
      console.error("Error fetching invoices:", invoicesError)
      throw new Error("Failed to fetch vendor analysis")
    }

    // Get all invoice IDs
    const invoiceIds = invoices.map((invoice) => invoice.id)

    // Get ignore invoice IDs
    const ignoreInvoiceIds = await getIgnoreInvoiceIds(invoiceIds)

    // Filter out invoices that have "ignore" category lines
    const filteredInvoices = invoices.filter((invoice) => !ignoreInvoiceIds.has(invoice.id))

    // Count vendors
    const vendorCounts: { [vendor: string]: number } = {}

    filteredInvoices.forEach((invoice) => {
      vendorCounts[invoice.source] = (vendorCounts[invoice.source] || 0) + 1
    })

    const data = Object.entries(vendorCounts).map(([name, value]) => ({ name, value }))

    return data
  } catch (error) {
    console.error("Error in fetchVendorAnalysis:", error)
    return []
  }
}
