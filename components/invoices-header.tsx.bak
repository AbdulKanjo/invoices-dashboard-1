"use client"

import { useState, useEffect } from "react"
import { CalendarRange, Download, MapPin, Tag } from "lucide-react"
import { Button } from "@/components/ui/button"
import { DateRangePicker } from "@/components/date-range-picker"
import { exportInvoices, fetchAllLocations, fetchAllCategories } from "@/lib/server-actions"
import { useRouter, useSearchParams } from "next/navigation"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { format } from "date-fns"

export function InvoicesHeader() {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  // Calculate actual Month-to-Date dates based on current date
  const today = new Date();
  const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
  const mtdFromDate = format(firstDayOfMonth, "yyyy-MM-dd");
  const mtdToDate = format(today, "yyyy-MM-dd");
  
  // Use URL parameters if available, otherwise use Month-to-Date defaults
  let defaultFrom = searchParams.get('dateFrom') || searchParams.get('from') || mtdFromDate;
  let defaultTo = searchParams.get('dateTo') || searchParams.get('to') || mtdToDate;
  let defaultLocation = searchParams.get('location') || '';
  let defaultCategory = searchParams.get('category') || '';
  
  const [exporting, setExporting] = useState(false)
  const [locations, setLocations] = useState<string[]>([]);
  const [categories, setCategories] = useState<string[]>([]);
  const [selectedLocation, setSelectedLocation] = useState<string>(defaultLocation);
  const [selectedCategory, setSelectedCategory] = useState<string>(defaultCategory);
  
  // Pagination limit state - default to 50 if not in URL
  const defaultLimit = searchParams.get('limit') || '50';
  const [selectedLimit, setSelectedLimit] = useState<string>(defaultLimit);
  
  // Load locations & categories
  useEffect(() => {
    async function loadFilterOptions() {
      try {
        const [locationsData, categoriesData] = await Promise.all([
          fetchAllLocations(),
          fetchAllCategories(),
        ])
        setLocations(["All Locations", ...locationsData])
        setCategories(["All Categories", ...categoriesData])
      } catch (error) {
        console.error("Error loading filter options:", error)
      }
    }

    loadFilterOptions()
  }, [])
  
  // Update URL when filters change
  const updateFilters = (key: string, value: string) => {
    const params = new URLSearchParams(searchParams.toString());
    
    if (value && value !== "All Locations" && value !== "All Categories") {
      params.set(key, value);
    } else {
      params.delete(key);
    }
    
    // Add timestamp to force data refresh
    params.set("_t", Date.now().toString());
    
    router.push(`/invoices?${params.toString()}`);
  }
  
  // Initialize with Month-to-Date if no date filters are in URL
  useEffect(() => {
    // Only run this on initial load when both date params are missing
    if (!searchParams.has('dateFrom') && !searchParams.has('from') && 
        !searchParams.has('dateTo') && !searchParams.has('to')) {
      console.log('No date params found, initializing with MTD dates');
      
      // Use a small timeout to ensure this runs after initial render
      // This prevents the race condition where data loads with empty params first
      setTimeout(() => {
        const params = new URLSearchParams(searchParams.toString());
        params.set('dateFrom', mtdFromDate);
        params.set('dateTo', mtdToDate);
        params.set('_t', Date.now().toString());
        console.log('Setting initial date params:', mtdFromDate, 'to', mtdToDate);
        router.push(`/invoices?${params.toString()}`);
      }, 100);
    }
  }, []);

  const handleExport = async () => {
    try {
      setExporting(true)
      
      // Use all the currently applied filters for export
      const filters = {
        location: selectedLocation !== 'All Locations' ? selectedLocation : '',
        category: selectedCategory !== 'All Categories' ? selectedCategory : '',
        dateFrom: searchParams.get('dateFrom') || mtdFromDate,
        dateTo: searchParams.get('dateTo') || mtdToDate,
        limit: selectedLimit || '50'
      };
      
      console.log('Exporting invoices with filters:', filters);
      const data = await exportInvoices(filters)

      // Convert data to CSV
      const headers = Object.keys(data[0]).join(",")
      const rows = data.map((row) => Object.values(row).join(","))
      const csv = [headers, ...rows].join("\n")

      // Create and download the file
      const blob = new Blob([csv], { type: "text/csv" })
      const url = URL.createObjectURL(blob)
      const a = document.createElement("a")
      a.href = url
      a.download = `wash-masters-invoices-${new Date().toISOString().split("T")[0]}.csv`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch (error) {
      console.error("Error exporting invoices:", error)
    } finally {
      setExporting(false)
    }
  }

  console.log('Date range in InvoicesHeader:', { defaultFrom, defaultTo, searchParams: Object.fromEntries([...searchParams.entries()]) });
  
  return (
    <div className="flex flex-col items-start justify-between gap-4 md:flex-row md:items-center">
      <div>
        <h1 className="text-2xl font-bold tracking-tight">Invoices</h1>
        <p className="text-sm text-slate-400">View and filter all your vendor invoices</p>
      </div>
      <div className="flex w-full flex-col gap-2 sm:flex-row md:w-auto">
        <div className="flex items-center gap-2">
          <CalendarRange className="h-4 w-4 text-slate-400" />
          <DateRangePicker 
            defaultFrom={defaultFrom}
            defaultTo={defaultTo}
            onApply={(range) => {
              if (range.from) {
                updateFilters('dateFrom', format(range.from, 'yyyy-MM-dd'))
              }
              if (range.to) {
                updateFilters('dateTo', format(range.to, 'yyyy-MM-dd'))
              }
            }}
          />
        </div>
        
        {/* Location Selector */}
        <div className="flex items-center bg-slate-900 border border-slate-800 rounded-md px-3 py-2 w-full sm:w-auto">
          <MapPin className="h-5 w-5 text-slate-400 mr-2" />
          <Select 
            value={selectedLocation} 
            onValueChange={(value) => {
              setSelectedLocation(value);
              updateFilters('location', value);
            }}
          >
            <SelectTrigger className="w-full sm:w-[180px] border-0 p-0 h-auto bg-transparent focus:ring-0 focus:ring-offset-0">
              <SelectValue placeholder="All Locations" />
            </SelectTrigger>
            <SelectContent className="bg-slate-800 border-slate-700">
              {locations.map(location => (
                <SelectItem key={location} value={location} className="text-slate-200 focus:bg-slate-700 focus:text-white">
                  {location}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        
        {/* Category Selector */}
        <div className="flex flex-wrap gap-3 items-center">
          <div className="flex items-center bg-slate-900 border border-slate-800 rounded-md px-3 py-2">
            <CalendarRange className="h-5 w-5 text-slate-400 mr-2" />
            <Select 
              value={selectedCategory} 
              onValueChange={(value) => {
                setSelectedCategory(value);
                updateFilters('category', value);
              }}
            >
              <SelectTrigger className="w-full sm:w-[180px] border-0 p-0 h-auto bg-transparent focus:ring-0 focus:ring-offset-0">
                <SelectValue placeholder="All Categories" />
              </SelectTrigger>
              <SelectContent className="bg-slate-800 border-slate-700">
                {categories.map(category => (
                  <SelectItem key={category} value={category} className="text-slate-200 focus:bg-slate-700 focus:text-white">
                    <div className="flex items-center gap-2">
                      {category && category.toLowerCase().includes('chemical') && (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-emerald-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <path d="M6 6h.01" />
                          <path d="M3 12h18" />
                          <path d="M12 3v18" />
                        </svg>
                      )}
                      {category && category.toLowerCase().includes('equipment') && (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-blue-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <circle cx="12" cy="12" r="10" />
                          <line x1="14.31" y1="8" x2="20.05" y2="17.94" />
                          <line x1="9.69" y1="8" x2="21.17" y2="8" />
                          <line x1="7.38" y1="12" x2="13.12" y2="2.06" />
                          <line x1="9.69" y1="16" x2="3.95" y2="6.06" />
                          <line x1="14.31" y1="16" x2="2.83" y2="16" />
                          <line x1="16.62" y1="12" x2="10.88" y2="21.94" />
                        </svg>
                      )}
                      {category && category.toLowerCase().includes('labor') && (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-orange-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <circle cx="12" cy="8" r="5" />
                          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" />
                          <polyline points="16 16 18 18 22 14" />
                        </svg>
                      )}
                      {category && (
                        !category.toLowerCase().includes('chemical') && 
                        !category.toLowerCase().includes('equipment') && 
                        !category.toLowerCase().includes('labor') && 
                        category !== 'All Categories') && (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <circle cx="12" cy="12" r="10" />
                          <path d="M12 8v4" />
                          <path d="M12 16h.01" />
                        </svg>
                      )}
                      {category === 'All Categories' && (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-slate-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                          <line x1="3" y1="9" x2="21" y2="9" />
                          <line x1="3" y1="15" x2="21" y2="15" />
                          <line x1="9" y1="3" x2="9" y2="21" />
                          <line x1="15" y1="3" x2="15" y2="21" />
                        </svg>
                      )}
                      {category}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          >
            <SelectTrigger className="w-full sm:w-[180px] border-0 p-0 h-auto bg-transparent focus:ring-0 focus:ring-offset-0">
              <SelectValue placeholder="All Categories" />
            </SelectTrigger>
            <SelectContent className="bg-slate-800 border-slate-700">
              {categories.map(category => (
                <SelectItem key={category} value={category} className="text-slate-200 focus:bg-slate-700 focus:text-white">
                  <div className="flex items-center gap-2">
                    {category && category.toLowerCase().includes('chemical') && (
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-emerald-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M6 6h.01" />
                        <path d="M3 12h18" />
                        <path d="M12 3v18" />
                      </svg>
                    )}
                    {category && category.toLowerCase().includes('equipment') && (
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-blue-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <circle cx="12" cy="12" r="10" />
                        <line x1="14.31" y1="8" x2="20.05" y2="17.94" />
                        <line x1="9.69" y1="8" x2="21.17" y2="8" />
                        <line x1="7.38" y1="12" x2="13.12" y2="2.06" />
                        <line x1="9.69" y1="16" x2="3.95" y2="6.06" />
                        <line x1="14.31" y1="16" x2="2.83" y2="16" />
                        <line x1="16.62" y1="12" x2="10.88" y2="21.94" />
                      </svg>
                    )}
                    {category && category.toLowerCase().includes('labor') && (
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-orange-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <circle cx="12" cy="8" r="5" />
                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" />
                        <polyline points="16 16 18 18 22 14" />
                      </svg>
                    )}
                    {category && (
                      !category.toLowerCase().includes('chemical') && 
                      !category.toLowerCase().includes('equipment') && 
                      !category.toLowerCase().includes('labor') && 
                      category !== 'All Categories') && (
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <circle cx="12" cy="12" r="10" />
                        <path d="M12 8v4" />
                        <path d="M12 16h.01" />
                      </svg>
                    )}
                    {category === 'All Categories' && (
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-slate-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                        <line x1="3" y1="9" x2="21" y2="9" />
                        <line x1="3" y1="15" x2="21" y2="15" />
                        <line x1="9" y1="3" x2="9" y2="21" />
                        <line x1="15" y1="3" x2="15" y2="21" />
                      </svg>
                    )}
                    {category}
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        
        {/* Limit Selector */}
        <div className="flex items-center bg-slate-900 border border-slate-800 rounded-md px-3 py-2 w-full sm:w-auto">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5 text-slate-400 mr-2">
            <line x1="6" y1="6" x2="18" y2="6"></line>
            <line x1="6" y1="12" x2="14" y2="12"></line>
            <line x1="6" y1="18" x2="10" y2="18"></line>
          </svg>
          <Select 
            value={selectedLimit} 
            onValueChange={(value) => {
              setSelectedLimit(value);
              updateFilters('limit', value);
            }}
          >
            <SelectTrigger className="w-full sm:w-[100px] border-0 p-0 h-auto bg-transparent focus:ring-0 focus:ring-offset-0">
              <SelectValue placeholder="Max 50" />
            </SelectTrigger>
            <SelectContent className="bg-slate-800 border-slate-700">
              <SelectItem value="50" className="text-slate-200 focus:bg-slate-700 focus:text-white">Max 50</SelectItem>
              <SelectItem value="60" className="text-slate-200 focus:bg-slate-700 focus:text-white">Max 60</SelectItem>
              <SelectItem value="80" className="text-slate-200 focus:bg-slate-700 focus:text-white">Max 80</SelectItem>
              <SelectItem value="100" className="text-slate-200 focus:bg-slate-700 focus:text-white">Max 100</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
      
      {/* Export Button */}
      <Button
        variant="outline"
        className="bg-slate-900 border-slate-800 text-slate-200 w-full flex items-center justify-center py-5"
        onClick={handleExport}
        disabled={exporting}
      >
        {exporting ? (
          <>
            <div className="mr-2 h-5 w-5 animate-spin rounded-full border-2 border-slate-400 border-t-transparent"></div>
            Exporting...
          </>
        ) : (
          <>
            <Download className="mr-2 h-5 w-5" />
            Export
          </>
        )}
      </Button>
    </div>
  )
}
